//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "cstep.h"

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************

//****************************************************************************************************
//глобальные переменные
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//конструктор и деструктор
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CStep::CStep(size_t end_point,long double step,const std::vector<CGrPoint> &input):Input(input)
{
 EndPoint=end_point;
 Step=step;
 Init();
}
//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CStep::~CStep()
{
}
//****************************************************************************************************
//закрытые функции
//****************************************************************************************************

//****************************************************************************************************
//открытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//выполнить инициализацию и перейти к первой точке
//----------------------------------------------------------------------------------------------------
void CStep::Init(void)
{
 Size=Input.size();
 if (Size==0) return;
 BeginX=Input[0].X;
 EndX=Input[Size-1].X;
 X=BeginX;
 StepIndex=0;
 Point=0;
 Done=false;
}
//----------------------------------------------------------------------------------------------------
//перейти к следующему шагу
//----------------------------------------------------------------------------------------------------
bool CStep::NextStep(void)
{
 if (Size==0) return(false);
 if (Done==true) return(false);
 StepIndex++;
 //для компенсаций ошибки накопления вместо суммирования x с step используем умножение на нужный шаг
 X=BeginX+static_cast<long double>(StepIndex)*Step;
 if (X>EndX)
 {
  X=EndX;
  Done=true;
 }
 return(true);
}
//----------------------------------------------------------------------------------------------------
//обновить точку
//----------------------------------------------------------------------------------------------------
bool CStep::UpdatePoint(void)
{
 if (Size==0) return(false);

 bool change_point=false;
 if (Done==true) change_point=true;

 while(1)
 {
  if (X>=Input[Point+1].X)//переходим к нужному отрезку
  {
   if (Point<EndPoint)
   {
    Point++;
    change_point=true;
    continue;
   }
  }
  break;
 }
 return(change_point);
}

//----------------------------------------------------------------------------------------------------
//получить текущую позицию и
//----------------------------------------------------------------------------------------------------
void CStep::GetPos(long double &x,size_t &point)
{
 x=X;
 point=Point;
}
